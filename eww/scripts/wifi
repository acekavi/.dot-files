#!/usr/bin/env bash
set -euo pipefail

EWW_BIN="${EWW_BIN:-eww}"

json_list() {
  # nmcli -t -f ACTIVE,SSID,SIGNAL,SECURITY dev wifi
  nmcli -t -f ACTIVE,SSID,SIGNAL,SECURITY dev wifi list 2>/dev/null \
    | awk -F: '
      BEGIN { print "[" }
      {
        active=$1; ssid=$2; signal=$3; sec=$4;
        # Escape quotes in SSID
        gsub(/"/, "\\\"", ssid);
        if (NR>1) printf ",";
        printf "{\"active\":%s,\"ssid\":\"%s\",\"signal\":%s,\"security\":\"%s\"}", (active=="yes"?"true":"false"), ssid, (signal==""?0:signal), (sec==""?"--":sec)
      }
      END { print "]" }
    '
}

toggle_menu() {
  visible="$($EWW_BIN get wifi-menu-visible || echo false)"
  if [[ "$visible" == "true" ]]; then
    $EWW_BIN update wifi-menu-visible=false wifi-selected-ssid='' wifi-password=''
    $EWW_BIN close wifi_menu || true
  else
    $EWW_BIN update wifi-menu-visible=true
    $EWW_BIN open wifi_menu
  fi
}

open_menu() {
  $EWW_BIN update wifi-menu-visible=true
  $EWW_BIN open wifi_menu
}

rescan() {
  # Trigger a rescan; poll will pick it up
  nmcli dev wifi rescan >/dev/null 2>&1 || true
}

connect() {
  ssid="$1"; pass="${2-}"
  if [[ -z "$ssid" ]]; then
    notify-send "Wi‑Fi" "No SSID provided" -t 3000 || true
    exit 1
  fi
  if [[ -n "$pass" ]]; then
    nmcli dev wifi connect "$ssid" password "$pass" >/dev/null 2>&1 || {
      notify-send "Wi‑Fi" "Failed to connect to $ssid" -t 4000 || true
      exit 1
    }
  else
    nmcli dev wifi connect "$ssid" >/dev/null 2>&1 || {
      notify-send "Wi‑Fi" "Failed to connect to $ssid" -t 4000 || true
      exit 1
    }
  fi
  $EWW_BIN update wifi-selected-ssid='' wifi-password='' wifi-menu-visible=false
  $EWW_BIN close wifi_menu || true
}

case "${1-}" in
  list-json)
    json_list
    ;;
  toggle-menu)
    toggle_menu
    ;;
  open-menu)
    open_menu
    ;;
  rescan)
    rescan
    ;;
  connect)
    shift
    connect "${1-}" "${2-}"
    ;;
  *)
    echo "Usage: $0 {list-json|toggle-menu|open-menu|rescan|connect <ssid> [password]}" >&2
    exit 2
    ;;
esac



